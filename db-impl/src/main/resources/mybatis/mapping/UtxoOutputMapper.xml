<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="andy.dao.UtxoOutputPoMapper" >
    <resultMap id="BaseResultMap" type="andy.model.UtxoOutputPo" >
        <id column="tx_hash" property="txHash" jdbcType="VARCHAR" />
        <id column="out_index" property="outIndex" jdbcType="INTEGER" />
        <result column="value" property="value" jdbcType="BIGINT" />
        <result column="lock_time" property="lockTime" jdbcType="BIGINT" />
        <result column="status" property="status" jdbcType="TINYINT" />
        <result column="address" property="address" jdbcType="VARCHAR" />
    </resultMap>
    <resultMap id="ResultMapWithBLOBs" type="andy.model.UtxoOutputPo" extends="BaseResultMap" >
        <result column="script" property="script" jdbcType="VARBINARY" />
    </resultMap>
    <sql id="Base_Column_List" >
        tx_hash, out_index, value, lock_time, status, address
    </sql>
    <sql id="Blob_Column_List" >
        script
    </sql>
    <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="andy.model.UtxoOutputPoKey" >
        select
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
        from utxo_output
        where tx_hash = #{txHash,jdbcType=VARCHAR}
        and out_index = #{outIndex,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="andy.model.UtxoOutputPoKey" >
        delete from utxo_output
        where tx_hash = #{txHash,jdbcType=VARCHAR}
        and out_index = #{outIndex,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="andy.model.UtxoOutputPo" >
        insert into utxo_output (tx_hash, out_index, value,
        lock_time, status, address,
        script)
        values (#{txHash,jdbcType=VARCHAR}, #{outIndex,jdbcType=INTEGER}, #{value,jdbcType=BIGINT},
        #{lockTime,jdbcType=BIGINT}, #{status,jdbcType=TINYINT}, #{address,jdbcType=VARCHAR},
        #{script,jdbcType=VARBINARY})
    </insert>
    <insert id="insertSelective" parameterType="andy.model.UtxoOutputPo" >
        insert into utxo_output
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="txHash != null" >
                tx_hash,
            </if>
            <if test="outIndex != null" >
                out_index,
            </if>
            <if test="value != null" >
                value,
            </if>
            <if test="lockTime != null" >
                lock_time,
            </if>
            <if test="status != null" >
                status,
            </if>
            <if test="address != null" >
                address,
            </if>
            <if test="script != null" >
                script,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="txHash != null" >
                #{txHash,jdbcType=VARCHAR},
            </if>
            <if test="outIndex != null" >
                #{outIndex,jdbcType=INTEGER},
            </if>
            <if test="value != null" >
                #{value,jdbcType=BIGINT},
            </if>
            <if test="lockTime != null" >
                #{lockTime,jdbcType=BIGINT},
            </if>
            <if test="status != null" >
                #{status,jdbcType=TINYINT},
            </if>
            <if test="address != null" >
                #{address,jdbcType=VARCHAR},
            </if>
            <if test="script != null" >
                #{script,jdbcType=VARBINARY},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="andy.model.UtxoOutputPo" >
        update utxo_output
        <set >
            <if test="value != null" >
                value = #{value,jdbcType=BIGINT},
            </if>
            <if test="lockTime != null" >
                lock_time = #{lockTime,jdbcType=BIGINT},
            </if>
            <if test="status != null" >
                status = #{status,jdbcType=TINYINT},
            </if>
            <if test="address != null" >
                address = #{address,jdbcType=VARCHAR},
            </if>
            <if test="script != null" >
                script = #{script,jdbcType=VARBINARY},
            </if>
        </set>
        where tx_hash = #{txHash,jdbcType=VARCHAR}
        and out_index = #{outIndex,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="andy.model.UtxoOutputPo" >
        update utxo_output
        set value = #{value,jdbcType=BIGINT},
        lock_time = #{lockTime,jdbcType=BIGINT},
        status = #{status,jdbcType=TINYINT},
        address = #{address,jdbcType=VARCHAR},
        script = #{script,jdbcType=VARBINARY}
        where tx_hash = #{txHash,jdbcType=VARCHAR}
        and out_index = #{outIndex,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="andy.model.UtxoOutputPo" >
        update utxo_output
        set value = #{value,jdbcType=BIGINT},
        lock_time = #{lockTime,jdbcType=BIGINT},
        status = #{status,jdbcType=TINYINT},
        address = #{address,jdbcType=VARCHAR}
        where tx_hash = #{txHash,jdbcType=VARCHAR}
        and out_index = #{outIndex,jdbcType=INTEGER}
    </update>

    <insert id="batchInsert" parameterType="java.util.List">
        insert into utxo_output (hash, tx_hash, value,
        lock_time, status, out_index,
        address, script)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.hash,jdbcType=VARCHAR}, #{item.txHash,jdbcType=VARCHAR}, #{item.value,jdbcType=BIGINT},
            #{item.lockTime,jdbcType=BIGINT}, #{item.status,jdbcType=TINYINT}, #{item.outIndex,jdbcType=INTEGER},
            #{item.address,jdbcType=VARCHAR}, #{item.script,jdbcType=VARBINARY})
        </foreach>
    </insert>
    <select id="countAll" resultType="java.lang.Long">
        select count(id) from utxo_output
    </select>
    <select id="selectList" parameterType="io.nuls.db.dao.impl.mybatis.util.Searchable"
            resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from utxo_output
        <include refid="io.nuls.db.dao.impl.mybatis.common.CommonMapper.Serach_Where"/>
    </select>
    <select id="selectCount" parameterType="io.nuls.db.dao.impl.mybatis.util.Searchable" resultType="java.lang.Long">
        select count(id) from utxo_output
        <include refid="io.nuls.db.dao.impl.mybatis.common.CommonMapper.Serach_Where"/>
    </select>
</mapper>
